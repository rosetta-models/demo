namespace demo.translate.conditional_default.example_1
version "${project.version}"

/*
Example 1:
tes 
Conditional mapping using a "default" clause that sets an attribute if it is unmapped.

The attribute EngineSpecification->capacityUnit is mapped to xml path engine->engineType->engineDetail->
volumeCapacityUnit, if that path does not exist, then the attribute is set to "UK Gallon".
*/
synonym source CONDITIONAL_DEFAULT_EXAMPLE_1

type Root:
    [rootType]
	engineSpecification EngineSpecification (1..1)
	    [synonym CONDITIONAL_DEFAULT_EXAMPLE_1 value "engine"]

type EngineSpecification:
	fuelType string (1..1)
	    [synonym CONDITIONAL_DEFAULT_EXAMPLE_1 value "combustible" path "engineType->engineDetail"]
	capacityUnit string (0..1)
	    [synonym CONDITIONAL_DEFAULT_EXAMPLE_1 value "volumeCapacityUnit" path "engineType->engineDetail" default to "UK Gallon"]

/*
Schema:

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="dataDocument">
        <xs:complexType>
            <xs:all>
                <xs:element name="engine">
                    <xs:complexType>
                        <xs:all>
                            <xs:element name="engineType">
                                <xs:complexType>
                                    <xs:all>
                                        <xs:element name="engineDetail">
                                            <xs:complexType>
                                                <xs:all>
                                                    <xs:element name="powerUnit" type="xs:string" minOccurs="0"/>
                                                    <xs:element name="volumeCapacityUnit" type="xs:string"
                                                                minOccurs="0"/>
                                                    <xs:element name="combustible" type="xs:string" minOccurs="0"/>
                                                </xs:all>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:all>
                                </xs:complexType>
                            </xs:element>
                        </xs:all>
                    </xs:complexType>
                </xs:element>
            </xs:all>
        </xs:complexType>
    </xs:element>
</xs:schema>
*/