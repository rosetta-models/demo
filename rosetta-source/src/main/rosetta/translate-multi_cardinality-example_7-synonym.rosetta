namespace demo.translate.multi_cardinality.example_7
version "${project.version}"

/*
 * Example 7:
 * Map list of basic types to nested list of complex types (multiple attributes)
 * List of fuelDetail and capacityDetail mapped into engineMetric list (EngineSpecification->engineMetric), so it merges
 * both
 * xml elements into the rosetta list type
 */
synonym source MULTI_CARDINALITY_EXAMPLE_7

type Root:
    [rootType]
    engine Engine (1..1)
        [synonym MULTI_CARDINALITY_EXAMPLE_7 value "engineType"]

type Engine:
    engineSpecification EngineSpecification (0..*)
        [synonym MULTI_CARDINALITY_EXAMPLE_7 value "fuelDetail" , "capacityDetail"]

type EngineSpecification:
    engineMetric EngineMetric (0..*)

type EngineMetric:
    fuel string (0..1)
        [synonym MULTI_CARDINALITY_EXAMPLE_7 value "combustible"]
    capacity string (0..1)
        [synonym MULTI_CARDINALITY_EXAMPLE_7 value "capacity"]
/*
 * Schema:

 * <?xml version="1.0" encoding="UTF-8"?>
 * <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
 *     <xs:element name="dataDocument">
 *         <xs:complexType>
 *             <xs:all>
 *                 <xs:element name="engineType">
 *                     <xs:complexType>
 *                         <xs:sequence>
 *                             <xs:element name="fuelDetail" maxOccurs="unbounded">
 *                                 <xs:complexType>
 *                                     <xs:sequence>
 *                                         <xs:element name="combustible" type="xs:string"/>
 *                                     </xs:sequence>
 *                                 </xs:complexType>
 *                             </xs:element>
 *                             <xs:element name="capacityDetail" maxOccurs="unbounded">
 *                                 <xs:complexType>
 *                                     <xs:sequence>
 *                                         <xs:element name="capacity" type="xs:string"/>
 *                                     </xs:sequence>
 *                                 </xs:complexType>
 *                             </xs:element>
 *                         </xs:sequence>
 *                     </xs:complexType>
 *                 </xs:element>
 *             </xs:all>
 *         </xs:complexType>
 *     </xs:element>
 * </xs:schema>
 */
