namespace demo.emissions.model
version "${project.version}"

func Create_VehicleOwnership: <"Creation of a vehicle ownership record file">
    inputs:
        drivingLicence DrivingLicence (0..*)
        vehicle Vehicle (1..1)
        dateOfPurchase date (1..1)
        isFirstHand boolean (1..1)
        vehicleOwnershipRegistrationID int (1..1)
    output:
        vehicleOwnership VehicleOwnership (1..1)

    condition DrivingLicenceExpiry: <"Driving licence must not be expired">
        drivingLicence -> dateOfRenewal all > dateOfPurchase

    condition DrivingLicenceVehicleClassification: <"Vehicle classification allowed by the driving licence needs to encompass the vehicle classification of the considered vehicle">
        drivingLicence -> vehicleEntitlement contains vehicle ->> vehicleClassification

    set vehicleOwnership:
        VehicleOwnership {
            drivingLicence: drivingLicence,
            vehicle: vehicle,
            dateOfPurchase: dateOfPurchase,
            isFirstHand: isFirstHand,
            vehicleOwnershipRegistrationID: vehicleOwnershipRegistrationID
        }

func Check_DrivingLicenceRenewalDate: <"Function to check whether the driving licence is expired or not">
    inputs:
        drivingLicence DrivingLicence (1..1)
        todayDate date (1..1)
    output:
        isExpired boolean (1..1)

    set isExpired: drivingLicence -> dateOfRenewal < todayDate

func Check_DieselEngine: <"Function to check whether the engine of the vehicle is of diesel type">
    inputs:
        engine Engine (1..1)
    output:
        isEngineTypeDiesel boolean (1..1)

    set isEngineTypeDiesel: engine -> engineType = EngineTypeEnum -> Diesel

func Check_YearOfManufacture: <"Function to check whether the year of manufacture of the vehicle is older than a year cut">
    inputs:
        specification Specification (1..1)
        yearCut int (1..1)
    output:
        isOlderThanYearCut boolean (1..1)

    set isOlderThanYearCut: specification -> yearOfManufacture < yearCut

func FindVehiclesByEngineType: <"Find all vehicles with given engine type.">
    inputs:
        vehicles Vehicle (0..*)
        engineType EngineTypeEnum (1..1)
    output:
        vehiclesWithEngineType Vehicle (0..*)

    add vehiclesWithEngineType: <"Filter each list 'item' with the given test.">
        vehicles filter CombustibleVehicle -> Car -> engine -> engineType = engineType

func FindDriversWithMaximumZeroTo60: <"Find all vehicles with given maximum 0 - 60 mph.">
    inputs:
        vehicles Vehicle (0..*)
        zeroTo60 number (1..1)
    output:
        vehiclesWithMaximumZeroTo60 Vehicle (0..*)

    add vehiclesWithMaximumZeroTo60: <"Each list 'item' can have a name specified.">
        vehicles filter vehicle [ vehicle ->> specification -> zeroTo60 < zeroTo60 ]

func FindCarsWithinEmissionLimits: <"Find all vehicles within given emissions metrics.">
    inputs:
        cars Car (0..*)
        coLimit int (0..1)
        noxLimit int (0..1)
        pmLimit int (0..1)
    output:
        carsWithinEmissionLimits Car (0..*)

    add carsWithinEmissionLimits: <"Filter (and other list operations) can contain expressions, and can be chained together.">
        cars
            filter
                if coLimit exists
                then item -> engine -> emissionMetrics -> carbonMonoxide <= coLimit
                else True
            then filter
                if noxLimit exists
                then item -> engine -> emissionMetrics -> nitrogenOxide <= noxLimit
                else True
            then filter
                if pmLimit exists
                then item -> engine -> emissionMetrics -> particulateMatter <= pmLimit
                else True

func FindOwnersWithinPenaltyPointLimit: <"Find all owners within penalty point limits on any driver licence (owners can have multiple licences, issued by different countries).">
    inputs:
        owners VehicleOwnership (0..*)
        maximumPenaltyPoints int (1..1)
    output:
        ownersWithinPenaltyPointLimit VehicleOwnership (0..*)

    add ownersWithinPenaltyPointLimit: <"Nested filter required to determine if all owner's licences do not exceed the penalty point limit.">
        owners
            filter owner [
                owner -> drivingLicence
                    filter licence [ licence -> penaltyPoints > maximumPenaltyPoints ]
                    then count = 0
            ]

func GetDrivingLicenceNames: <"Get driver's names from given list of licences.">
    inputs:
        drivingLicences DrivingLicence (0..*)
    output:
        ownersName string (0..*)

    add ownersName: <"Filter lists to only include drivers with first and last names, then use 'map' to convert driving licences into list of names.">
        drivingLicences
            extract person
            then filter firstName exists and surname exists
            then extract firstName + " " + surname

func GetAllDrivingLicencesFromInternationalOwners: <"Get list of driving licences from owners with 2 or more licences.">
    inputs:
        owners VehicleOwnership (0..*) <"List of owners, each contain a list of driving licences.">
    output:
        drivingLicences DrivingLicence (0..*) <"Flattened list of driving licences.">

    add drivingLicences:
        owners
            // map each owner item into a list of driving licences
            extract drivingLicence // each item is now a list of driving licences
                    // filter to include only items which contain more than one driving licence
            then filter count > 1 // each item is still a list of driving licences
                    // flatten list so output is a "flat" list of driving licences (rather that a list where each item is a list of driving licences)
            then flatten

func GetDrivingLicence: <"Find driving licence for the given licence number.">
    inputs:
        drivingLicences DrivingLicence (0..*)
        findLicenceNumber string (1..1)
    output:
        drivingLicence DrivingLicence (0..1)

    set drivingLicence:
        drivingLicences
            filter licenceNumber = findLicenceNumber
            then only-element

func AddDrivingLicenceToVehicleOwnership: <"Add new driving licence to vehicle owner.">
    inputs:
        vehicleOwnership VehicleOwnership (1..1)
        newDrivingLicence DrivingLicence (1..1)
    output:
        updatedVehicleOwnership VehicleOwnership (1..1)

    set updatedVehicleOwnership: vehicleOwnership

    add updatedVehicleOwnership -> drivingLicence: <"Add newDrivingLicence to existing list of driving licences">
        newDrivingLicence

func RenewAllDrivingLicencesForOwner: <"Renew all vehicle owner's driving licences.">
    inputs:
        vehicleOwnership VehicleOwnership (1..1)
        newDateOfRenewal date (1..1)
    output:
        updatedVehicleOwnership VehicleOwnership (1..1)

    set updatedVehicleOwnership: vehicleOwnership

    set updatedVehicleOwnership -> drivingLicence: <"Overwrite existing driving licences with renewed driving licences.">
        vehicleOwnership -> drivingLicence
            //then without extract means that item is a list of driving licenses
            then RenewAllDrivingLicences(item, newDateOfRenewal)

func RenewAllDrivingLicences: <"Create new driving licences with new date of renewal.">
    inputs:
        drivingLicences DrivingLicence (1..*)
        newDateOfRenewal date (1..1)
    output:
        renewedDrivingLicences DrivingLicence (1..*)

    add renewedDrivingLicences:
        drivingLicences 
            //then with extract will pass driving licenses one by one to item
            then extract RenewDrivingLicence(item, newDateOfRenewal)

func RenewDrivingLicence: <"Create new driving licence with new date of renewal.">
    inputs:
        drivingLicence DrivingLicence (1..1)
        newDateOfRenewal date (1..1)
    output:
        renewedDrivingLicence DrivingLicence (1..1)

    set renewedDrivingLicence: drivingLicence

    set renewedDrivingLicence -> dateOfRenewal: newDateOfRenewal

func SumNumbers: <"Returns the sum of the given list of numbers.">
    inputs:
        numbers number (0..*)
    output:
        total number (1..1)

    set total: numbers sum

func JoinStrings: <"Concatenates the list of strings, separating each element with the given delimiter, using the join keyword.">
    inputs:
        strings string (0..*)
    output:
        result string (1..1)

    set result: strings join ", "

func FindMaxNumber: <"Returns the highest number from the given list of numbers, using the max keyword.">
    inputs:
        numbers number (0..*)
    output:
        result number (1..1)

    set result: numbers max

func SortDatesChronologically: <"Sorts the list of dates chronologically.">
    inputs:
        dates date (0..*)
    output:
        sortedDates date (0..*)

    add sortedDates: dates sort

func GetFirst: <"Get the first date.">
    inputs:
        dates date (0..*)
    output:
        firstDate date (0..1)

    set firstDate: dates first

func FindCarWithMaxPower: <"Returns the car with the highest power engine.">
    inputs:
        cars Car (0..*)
    output:
        carWithMaxPower Car (1..1)

    set carWithMaxPower: cars max [ item -> engine -> power ]

func FindVehicleWithMaxPowerUsingReduce: <"Returns the vehicle with the highest power engine, using the reduce keyword.">
    inputs:
        cars Car (0..*)
    output:
        carWithMaxPower Car (1..1)

    set carWithMaxPower:
        cars
            reduce v1, v2 [
                if v1 -> engine -> power > v2 -> engine -> power
                then v1
                else v2
            ]

func ComputeMileage: <"Estimates the mileage in kilometres of a given vehicle.">
    inputs:
        vehicle Vehicle (1..1)
    output:
        mileage number (1..1)

    set mileage:
        vehicle switch
            ElectricCar        then 5 * batteryCapacity, // assume 5 kilometres per kWh of battery
            Car                then 15 * fuelCapacity,   // assume 15 kilometres per litre of fuel
            CombustibleVehicle then 80,                  // for any other combustible vehicle, assume a mileage of 80 kilometres
            Bicycle            then 30 // assume a mileage of 30 kilometres for a bicycle
