namespace demo.translate.conditional_set_to.example_13
version "${project.version}"

/*
 * Example 13:
 * The rosetta element engineEnum is conditional set to "Hybrid" from EngineEnum when "alternativeFuelDetail" exists and  "
 * fuelDetail" exists
 */
synonym source CONDITIONAL_SET_TO_EXAMPLE_13

type Root:
    [rootType]
    fuel string (1..1)
        [synonym CONDITIONAL_SET_TO_EXAMPLE_13 value "combustible" path "engineType->engineDetail->fuelDetail"]
    alternativeFuel string (1..1)
        [synonym CONDITIONAL_SET_TO_EXAMPLE_13 value "combustible" path "engineType->engineDetail->alternativeFuelDetail"]
    engineSpecification EngineSpecification (1..*)
        [synonym CONDITIONAL_SET_TO_EXAMPLE_13 value "engineType"]

type EngineSpecification:
    engineMetric EngineMetric (1..*)
        [synonym CONDITIONAL_SET_TO_EXAMPLE_13 value "engineDetail"]

type EngineMetric:
    engineEnum EngineEnum (0..1)
        [synonym CONDITIONAL_SET_TO_EXAMPLE_13 set to EngineEnum -> Hybrid when "alternativeFuelDetail" exists and "fuelDetail" exists]

enum EngineEnum:
    Hybrid
        /*
         * Schema:

         * <?xml version="1.0" encoding="UTF-8"?>
         * <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
         *     <xs:element name="dataDocument">
         *         <xs:complexType>
         *             <xs:all>
         *                 <xs:element name="engineType">
         *                     <xs:complexType>
         *                         <xs:sequence>
         *                             <xs:element name="engineDetail" minOccurs="0" maxOccurs="unbounded">
         *                                 <xs:complexType>
         *                                     <xs:sequence>
         *                                         <xs:element name="fuelDetail" minOccurs="0" maxOccurs="unbounded">
         *                                             <xs:complexType>
         *                                                 <xs:sequence>
         *                                                     <xs:element name="combustible" type="xs:string"/>
         *                                                 </xs:sequence>
         *                                             </xs:complexType>
         *                                         </xs:element>
         *                                         <xs:element name="alternativeFuelDetail" minOccurs="0">
         *                                             <xs:complexType>
         *                                                 <xs:sequence>
         *                                                     <xs:element name="combustible" type="xs:string"/>
         *                                                 </xs:sequence>
         *                                             </xs:complexType>
         *                                         </xs:element>
         *                                     </xs:sequence>
         *                                 </xs:complexType>
         *                             </xs:element>
         *                         </xs:sequence>
         *                     </xs:complexType>
         *                 </xs:element>
         *             </xs:all>
         *         </xs:complexType>
         *     </xs:element>
         * </xs:schema>
         */
