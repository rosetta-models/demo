namespace demo.ingest_synonym.mappers.example_12
version "${project.version}"

/*
Example 12:

Mapper merges two lists, engineDetail and e, into a list of type EngineSpecification.

*/
synonym source MAPPERS_EXAMPLE_12

type Root:
    [rootType]
	engine Engine (1..1)

type Engine:
	engineSpecification EngineSpecification (0..*)
	    // merge lists fuelDetail and capacityDetail together
	    [synonym MAPPERS_EXAMPLE_12 value "engineType" mapper "Example12"]

type EngineSpecification:
    // value updated by the mapper
    emissions string (1..1)
    // value updated by the mapper
    fuelType string (1..1)
    // value updated by the mapper
    volumeUnit string (1..1)
    // value updated by the mapper
    volumeConsumption string (1..1)

/*
Schema:

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="dataDocument">
        <xs:complexType>
            <xs:all>
                <xs:element name="engineType">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="fuelDetail" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element type="xs:string" name="emissions"/>
                                        <xs:element type="xs:string" name="combustible"/>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="capacityDetail" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element type="xs:string" name="capacityUnit"/>
                                        <xs:element type="xs:string" name="volumeConsumption"/>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:all>
        </xs:complexType>
    </xs:element>
</xs:schema>
*/